{
  "global": {
    "tips": {
      "good_bye": "Ok! Good bye.",
      "success": "Success",
      "error:": "Error",
      "fail": "Fail"
    },
    "options": {
      "unixify": {
        "desc": "Output the path as unix style, useful in Windows Git bash."
      },
      "force": {
        "desc": "Forced mode, skip the question."
      },
      "nolog": {
        "desc": "Don't not display any log."
      },
      "ignore_rc": {
        "desc": "Ignore .gpmrc. don't run any hook you don't trust."
      }
    }
  },
  "commands": {
    "add": {
      "desc": "Add a repository to gpm.",
      "argv": {
        "repo": {
          "desc": "git url address."
        }
      },
      "options": {
        "plugin": {
          "desc": "run the plugin after add repository."
        },
        "name": {
          "desc": "custom repository directory name."
        }
      },
      "log": {
        "invalid_url": "Invalid Repository Url: {{{repo}}}, please Make sure it is right.",
        "info_add_success": "Repository has been add to {{{path}}}",
        "info_copy_clipboard": "Now you can press {{{key}}} to paste the path",
        "warn_copy_clipboard": "Can not copy the path to you system clipboard",
        "confirm_cover": "Are you sure to cover {{{path}}}",
        "make_sure_install": "Can not Found {{{bin}}} environment variable in system, please make sure you has install it.",
        "info_run_plugin": "Running plugin: {{{name}}}",
        "err_run_plugin": "ERROR: Plugin {{{name}}} do not export [add] method"
      }
    },
    "remove": {
      "desc": "Remove a repository from registry and disk.",
      "argv": {
        "owner": {
          "desc": "the repository'owner."
        },
        "repo": {
          "desc": "the repository'name."
        }
      },
      "log": {
        "err_missing_repo": "remove <{{{owner}}}> <repo> missing repo",
        "info_type_to_search": "Type to Search",
        "warn_confirm_del": "Are you sure to delete {{{repo}}}",
        "del": "{{{repo}}} have been removed."
      }
    },
    "list": {
      "desc": "Display the all repositories in registry.",
      "argv": {
        "key": {
          "desc": "filter by the key."
        }
      },
      "log": {
        "warn_empty_registry": "You did not add any repository yet, try run command line: ${config.name} add <repo> [options]",
        "err_not_found": "Not Found any repository"
      }
    },
    "tree": {
      "desc": "Display the all repositories in registry as a tree view.",
      "argv": {
        "key": {
          "desc": "filter by the key."
        }
      }
    },
    "clean": {
      "desc": "Clear the cache, locate in {{{tempPath}}}."
    },
    "find": {
      "desc": "Find repository by a key, You can get all about the repository info."
    },
    "relink": {
      "desc": "Relink the base directory and gpm registry, like Angular, trigger the $digest in manual."
    },
    "config": {
      "desc": "A series handler of configurations.",
      "argv": {
        "action": {
          "desc": "Config action."
        },
        "key": {
          "desc": "Config key."
        },
        "value": {
          "desc": "Config value."
        },
        "log": {
          "require_key": "The [key] must be required",
          "require_val": "The <value> must be required",
          "info_reset": "Has reset the config to default",
          "info_help": "Flow the command line: {{{cmd}}}"
        }
      }
    },
    "runtime": {
      "desc": "Print the program runtime, useful for submit issue."
    },
    "import": {
      "desc": "Import local repository into gpm registry.",
      "options": {
        "hard": {
          "desc": "hard mode, move the repository directory to gpm base directory instead of link directory by default."
        },
        "all": {
          "desc": "traverse the cwd, find the child dir and import then all to gpm. loop 1 deep dir."
        }
      },
      "argv": {
        "dir": {
          "desc": "The directory you want to import."
        }
      },
      "log": {
        "invalid_repo": "Invalid repo: {{{repo}}}, please make sure that is a git repository.",
        "invalid_repo_url": "Invalid repository, please make sure that you have set remote repository url.",
        "warn_cmd_require_pms": "if you are using fucking <cmd>, Make sure you run it as administrator, or it will not have permission",
        "confirm_replace": "repository has exist, Are you sure to replace {{{path}}}"
      }
    },
    "foreach": {
      "desc": "Run the plugin in each project. The current work directory is the current project.",
      "argv": {
        "plugin": {
          "desc": "The plugin you want to run in the loop."
        }
      },
      "log": {
        "not_export_foreach_method": "Plugin don't export foreach method."
      }
    },
    "plugin": {
      "desc": "A series handler of plugin.",
      "argv": {
        "action": {
          "desc": "Plugin action."
        },
        "key": {
          "desc": "Plugin key."
        }
      },
      "log": {
        "require_key": "The [key] must be required, please try again: {{{cmd}}}",
        "info_help": "Flow the command line: {{{cmd}}}"
      }
    },
    "licenses": {
      "desc": "Give you the license (and URL to the source code) associated with each repository."
    }
  }
}
